# main test workflow; ported from .travis.yaml

name: main

on:
  push:
    branches: [ '*', $default-branch ]
    tags: ['[0-9]*']   # anything looks like a version.
  pull_request:
    branches: [ $default-branch ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      OMP_NUM_THREADS: 1

    defaults:
      run:
        shell: bash -l {0}   # for conda.

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ '3.8', '3.10', '3.13' ]
        exclude:
          - os: macos-latest
            python-version: '3.10'
          - os: macos-latest
            python-version: '3.13'
    steps:

    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Cache conda
      uses: actions/cache@v4
      env:
        # Increase this value to reset cache.
        CACHE_NUMBER: 1
      with:
        path: ~/conda_pkgs_dir
        key:
          ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}
    - name: Setup Conda Environment
      uses: conda-incubator/setup-miniconda@v3.2.0
      with:
        activate-environment: test
        channels: bccp
        show-channel-urls: true
        use-only-tar-bz2: false
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}

    - name: Setup test env
      run: |
        conda install -q -y \
               python=${{ matrix.python-version }} \
               numpy=${{ matrix.numpy-version }} \
               nose cython mpi4py \
               --file requirements.txt \
               --file requirements-extras.txt

        # submitting coverage to coveralls
        pip install coveralls
        # install nbodykit itself
        pip install .[extras]
        conda list --explicit

    - name: Install Compilers
      run: |
        if [ "$RUNNER_OS" == "macOS" ]; then
          conda install -q -y clang_osx-64 clangxx_osx-64 gfortran_osx-64
        else
          conda install -q -y gcc_linux-64 gxx_linux-64 gfortran_linux-64
        fi
    - name: Build
      run: |
        python -m build
    - name: Python Unit tests
      run: |
        python run-tests.py -v --mpirun='mpirun -n 4' --with-coverage
    - name: Store the distribution packages
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10' #Only do this once!
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/nbodykit*.tar.gz

  publish-to-pypi:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/nbodykit
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
    - name: Download the source dist
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
